// ‡∏Ñ‡∏•‡∏≤‡∏™‡πÅ‡∏°‡πà (Abstract Class)
abstract class Employee {
  // Private properties
  String _name;
  int _salary;

  // Static property
  static int count = 10;

  // Constructor
  Employee(this._name, this._salary);

  // Abstract Methods
  void showDetail();
  void work();

  // Static method
  static void information() {
    print("\nüè¢ ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏´‡∏°‡∏π‡∏Å‡∏£‡∏≠‡∏ö ‡∏à‡∏≥‡∏Å‡∏±‡∏î");
    print("üìç ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á: ‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ");
    print("üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: 0997778888");
    print("-------------------");
  }

  static void showFounder(String founder) {
    print("üí° ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì $founder!");
  }

  // Getter
  String get name => _name;
  int get salary => _salary;

  // Setter
  set name(String value) => _name = value;
  set salary(int value) {
    if (value >= 0) {
      _salary = value;
    } else {
      print("‚ùå ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ö‡∏ß‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!");
    }
  }
}

//* Mixin - Logging (‡∏û‡∏¥‡∏°‡∏û‡πå Log ‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤)
mixin Logging {
  void log(String message) {
    print("üìå [LOG]: $message");
  }
}

//* Mixin - Bonus (‡πÉ‡∏´‡πâ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏Å‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô)
mixin Bonus {
  void giveBonus(Employee employee, int amount) {
    employee.salary += amount;
    print("üéâ ${employee.name} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÇ‡∏ö‡∏ô‡∏±‡∏™ $amount ‡∏ö‡∏≤‡∏ó! (‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà: ${employee.salary} ‡∏ö‡∏≤‡∏ó)");
  }
}

// ‡∏Ñ‡∏•‡∏≤‡∏™‡∏•‡∏π‡∏Å (Child Class) - Manager
class Manager extends Employee with Logging, Bonus {
  String department;

  Manager(String name, int salary, this.department) : super(name, salary);

  @override
  void showDetail() {
    print("\nüë®‚Äçüíº ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£");
    print("‡∏ä‡∏∑‡πà‡∏≠: $name");
    print("‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: $salary ‡∏ö‡∏≤‡∏ó");
    print("üìÇ ‡πÅ‡∏ú‡∏ô‡∏Å: $department");
    print("-------------------");
  }

  @override
  void work() {
    print("üìä ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ $name ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å $department");
    log("‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ $name ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");
  }
}

// ‡∏Ñ‡∏•‡∏≤‡∏™‡∏•‡∏π‡∏Å (Child Class) - Developer
class Developer extends Employee with Logging {
  String language;

  Developer(String name, int salary, this.language) : super(name, salary);

  @override
  void showDetail() {
    print("\nüë®‚Äçüíª ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤");
    print("‡∏ä‡∏∑‡πà‡∏≠: $name");
    print("‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: $salary ‡∏ö‡∏≤‡∏ó");
    print("üíª ‡∏†‡∏≤‡∏©‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: $language");
    print("-------------------");
  }

  @override
  void work() {
    print("üíª ‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤ $name ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤ $language");
    log("‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤ $name ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î");
  }
}

void main() {
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Static Method ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏≤‡∏™‡πÅ‡∏°‡πà
  Employee.information();
  Employee.showFounder("Got");

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Object ‡∏Ç‡∏≠‡∏á Manager ‡πÅ‡∏•‡∏∞ Override Method
  Manager manager1 = Manager("John Doe", 75000, "IT");
  manager1.showDetail();
  manager1.work();

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Object ‡∏Ç‡∏≠‡∏á Developer ‡πÅ‡∏•‡∏∞ Override Method
  Developer dev1 = Developer("Alice", 50000, "Dart");
  dev1.showDetail();
  dev1.work();

  // ‡πÉ‡∏´‡πâ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏Å‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô (Manager ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Bonus ‡πÑ‡∏î‡πâ)
  manager1.giveBonus(manager1, 5000);
}